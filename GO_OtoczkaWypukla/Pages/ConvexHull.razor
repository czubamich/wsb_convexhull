@page "/convexhull"
@using GO_OtoczkaWypukla.Algorithms
@using System.Linq
@using Blazorise.DataGrid
@using Plotly.Blazor
@using Plotly.Blazor.Traces
@using Plotly.Blazor.Traces.ScatterLib;
@inject ConvexHullAlgorithm ConvexHullAlgorithm

<PageTitle>Otoczka Wypukła</PageTitle>

<h1>Otoczka Wypukła</h1>

@{
    <h3>Zadane punkty</h3>
    <DataGrid TItem="Point"
          RowUpdated="@calculateConvexHull"
          RowRemoved="@calculateConvexHull"
          RowInserted="@calculateConvexHull"
          Data="@givenPoints"
          EditMode="DataGridEditMode.Inline"
          Editable
          ShowPager
          PagerPosition="DataGridPagerPosition.Bottom"
          PagerOptions="new(){ ButtonSize=Size.Small }"
          Responsive>
        <DataGridColumns>
            <DataGridCommandColumn Width="10%">
                <NewCommandTemplate>
                    <Button Color="Color.Success" Clicked="@context.Clicked"><Icon Name="IconName.Add" /></Button>
                </NewCommandTemplate>
                <EditCommandTemplate>
                    <Button Color="Color.Primary" Clicked="@context.Clicked"><Icon Name="IconName.Edit" /></Button>
                </EditCommandTemplate>
                <DeleteCommandTemplate>
                    <Button Color="Color.Danger" Clicked="@context.Clicked"><Icon Name="IconName.Delete" /></Button>
                </DeleteCommandTemplate>
                <SaveCommandTemplate>
                    <Button Color="Color.Success" Clicked="@context.Clicked"><Icon Name="IconName.Save" /></Button>
                </SaveCommandTemplate>
                <CancelCommandTemplate>
                    <Button Color="Color.Secondary" Clicked="@context.Clicked"><Icon Name="IconName.Undo" /></Button>
                </CancelCommandTemplate>
            </DataGridCommandColumn>
            <DataGridColumn Field="@nameof(Point.X)" Caption="X" Editable />
            <DataGridColumn Field="@nameof(Point.Y)" Caption="Y" Editable />
        </DataGridColumns>
        
        <PageButtonTemplate>
            <Span TextColor="TextColor.Success">
                @context.PageNumber
            </Span>
        </PageButtonTemplate>
        <NextPageButtonTemplate><Icon Name="IconName.StepForward" /></NextPageButtonTemplate>
        <PreviousPageButtonTemplate><Icon Name="IconName.StepBackward" /></PreviousPageButtonTemplate>
        <LastPageButtonTemplate><Icon Name="IconName.Forward" /></LastPageButtonTemplate>
        <FirstPageButtonTemplate><Icon Name="IconName.Backward" /></FirstPageButtonTemplate>
    </DataGrid>

    <Divider />
    
    <h2>Wynik</h2>
    <PlotlyChart style="height: 60vh; min-height: 350px" @bind-Config="config" @bind-Layout="plotLayout" @bind-Data="plotData" @ref="chart"/>
    @if(convexHullPoints.Count>0)
    {
        <h4 style="padding-bottom: 3vh">Otoczką wypukłą jest @PrintFigureName(convexHullPoints.Count).</h4>
    }

    <h2>Współrzędne</h2>
    <DataGrid TItem="Point"
        Data="@convexHullPoints"
        TotalItems="@convexHullPoints.Count"
        ShowPager
        PagerPosition="DataGridPagerPosition.Bottom"
        PagerOptions="new(){ ButtonSize=Size.Small }"
        Responsive>
        <DataGridColumns>
            <DataGridColumn Field="@nameof(Point.X)" Caption="X" />
            <DataGridColumn Field="@nameof(Point.Y)" Caption="Y" />
        </DataGridColumns>
        <NextPageButtonTemplate><Icon Name="IconName.StepForward" /></NextPageButtonTemplate>
        <PreviousPageButtonTemplate><Icon Name="IconName.StepBackward" /></PreviousPageButtonTemplate>
        <LastPageButtonTemplate><Icon Name="IconName.Forward" /></LastPageButtonTemplate>
        <FirstPageButtonTemplate><Icon Name="IconName.Backward" /></FirstPageButtonTemplate>
    </DataGrid>
}

@code {
    List<Point> givenPoints = new();
    List<Point> convexHullPoints = new();
    PlotlyChart chart;
    Plotly.Blazor.Config config = new()
        {
            AutoSizable = true,
            Responsive = true,
        };
    Plotly.Blazor.Layout plotLayout = new()
        {
            ClickMode = Plotly.Blazor.LayoutLib.ClickModeFlag.Event,
            AutoSize = true,
            ShowLegend = false,
        };
    IList<ITrace> plotData;

    protected override async Task OnInitializedAsync()
    {
        givenPoints = new List<Point>() { new(), new(), new(), new() };
        convexHullPoints = ConvexHullAlgorithm.CalculateConvexHull(givenPoints);
        plotData = regenPlotData();

        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Przeliczenie punktów otoczki wypukłej
    /// </summary>
    private async Task calculateConvexHull()
    {
        convexHullPoints = ConvexHullAlgorithm.CalculateConvexHull(givenPoints);

        chart.Data = regenPlotData();
        await chart.Update();
    }

    /// <summary>
    /// Przegenerowanie punktów na wykresie
    /// </summary>
    public IList<ITrace> regenPlotData()
    {
        if (givenPoints.Count == 0)
        {
            return new List<ITrace>()
            {
                new Scatter
                {
                    Name = "GivenPoints",
                    Mode = ModeFlag.Markers,
                    X = givenPoints.Select(f => (object)f.X).ToList<object>(),
                    Y = givenPoints.Select(f => (object)f.Y).ToList<object>()
                }
            };
        }
        else
        {
            return new List<ITrace>()
            {
                new Scatter
                {
                    Name = "GivenPoints",
                    Mode = ModeFlag.Markers,
                    X = givenPoints.Select(f => (object)f.X).ToList<object>(),
                    Y = givenPoints.Select(f => (object)f.Y).ToList<object>()
                },
                new Scatter
                {
                    Name = "ConvexHull",
                    Mode = ModeFlag.Lines,
                    X = convexHullPoints.Select(f => (object)f.X).Append(convexHullPoints.First().X).ToList() ?? new List<object>(),
                    Y = convexHullPoints.Select(f => (object)f.Y).Append(convexHullPoints.First().Y).ToList() ?? new List<object>()
                }
            };
        }
    }

    private string PrintFigureName(int p)
    {
        return p switch
        {
            0 => "-",
            1 => "Punkt",
            2 => "Linia",
            3 => "Trójkąt",
            4 => "Czworokąt",
            5 => "Pięciokąt",
            6 => $"Sześciokąt",
            _ => $"{p}-kąt"
        };
    }
}
